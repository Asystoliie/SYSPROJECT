!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
DEFAULT_VERBOSITY	Makefile	/^DEFAULT_VERBOSITY=0$/;"	m
DIRS_INDENT	Makefile	/^DIRS_INDENT	:= threads userprog test$/;"	m
INDENT	Makefile	/^INDENT	:= indent --indent-level4$/;"	m
LPR	Makefile	/^LPR	:=	enscript --columns=2  --borders -r --landscape \\$/;"	m
PROGRAMS	bin/Makefile	/^PROGRAMS=coff2noff out disassemble$/;"	m
AOUTHDR	bin/coff.h	/^      } AOUTHDR;$/;"	t	typeref:struct:aouthdr
AOUTHSZ	bin/coff.h	34;"	d
MIPSELMAGIC	bin/coff.h	15;"	d
OMAGIC	bin/coff.h	17;"	d
SOMAGIC	bin/coff.h	18;"	d
aouthdr	bin/coff.h	/^typedef struct aouthdr {$/;"	s
bsize	bin/coff.h	/^        long    bsize;          \/* uninitialized data "   "             *\/$/;"	m	struct:aouthdr
bss_start	bin/coff.h	/^        long    bss_start;      \/* base of bss used for this file       *\/$/;"	m	struct:aouthdr
cprmask	bin/coff.h	/^        long    cprmask[4];     \/* co-processor register masks          *\/$/;"	m	struct:aouthdr
data_start	bin/coff.h	/^        long    data_start;     \/* base of data used for this file      *\/$/;"	m	struct:aouthdr
dsize	bin/coff.h	/^        long    dsize;          \/* initialized data "  "                *\/$/;"	m	struct:aouthdr
entry	bin/coff.h	/^        long    entry;          \/* entry pt.                            *\/$/;"	m	struct:aouthdr
f_flags	bin/coff.h	/^        unsigned short  f_flags;        \/* flags *\/$/;"	m	struct:filehdr
f_magic	bin/coff.h	/^        unsigned short  f_magic;        \/* magic number *\/$/;"	m	struct:filehdr
f_nscns	bin/coff.h	/^        unsigned short  f_nscns;        \/* number of sections *\/$/;"	m	struct:filehdr
f_nsyms	bin/coff.h	/^        long            f_nsyms;        \/* sizeof(symbolic hdr) *\/$/;"	m	struct:filehdr
f_opthdr	bin/coff.h	/^        unsigned short  f_opthdr;       \/* sizeof(optional hdr) *\/$/;"	m	struct:filehdr
f_symptr	bin/coff.h	/^        long            f_symptr;       \/* file pointer to symbolic header *\/$/;"	m	struct:filehdr
f_timdat	bin/coff.h	/^        long            f_timdat;       \/* time & date stamp *\/$/;"	m	struct:filehdr
filehdr	bin/coff.h	/^struct filehdr {$/;"	s
gp_value	bin/coff.h	/^        long    gp_value;       \/* the gp value used for this object    *\/$/;"	m	struct:aouthdr
gprmask	bin/coff.h	/^        long    gprmask;        \/* general purpose register mask        *\/$/;"	m	struct:aouthdr
magic	bin/coff.h	/^        short   magic;          \/* see above                            *\/$/;"	m	struct:aouthdr
s_flags	bin/coff.h	/^        long            s_flags;        \/* flags *\/$/;"	m	struct:scnhdr
s_lnnoptr	bin/coff.h	/^        long            s_lnnoptr;      \/* file ptr to gp histogram *\/$/;"	m	struct:scnhdr
s_name	bin/coff.h	/^        char            s_name[8];      \/* section name *\/$/;"	m	struct:scnhdr
s_nlnno	bin/coff.h	/^        unsigned short  s_nlnno;        \/* number of gp histogram entries *\/$/;"	m	struct:scnhdr
s_nreloc	bin/coff.h	/^        unsigned short  s_nreloc;       \/* number of relocation entries *\/$/;"	m	struct:scnhdr
s_paddr	bin/coff.h	/^        long            s_paddr;        \/* physical address, aliased s_nlib *\/$/;"	m	struct:scnhdr
s_relptr	bin/coff.h	/^        long            s_relptr;       \/* file ptr to relocation *\/$/;"	m	struct:scnhdr
s_scnptr	bin/coff.h	/^        long            s_scnptr;       \/* file ptr to raw data for section *\/$/;"	m	struct:scnhdr
s_size	bin/coff.h	/^        long            s_size;         \/* section size *\/$/;"	m	struct:scnhdr
s_vaddr	bin/coff.h	/^        long            s_vaddr;        \/* virtual address *\/$/;"	m	struct:scnhdr
scnhdr	bin/coff.h	/^struct scnhdr {$/;"	s
text_start	bin/coff.h	/^        long    text_start;     \/* base of text used for this file      *\/$/;"	m	struct:aouthdr
tsize	bin/coff.h	/^        long    tsize;          \/* text size in bytes, padded to DW bdry*\/$/;"	m	struct:aouthdr
vstamp	bin/coff.h	/^        short   vstamp;         \/* version stamp                        *\/$/;"	m	struct:aouthdr
MAIN	bin/coff2flat.c	15;"	d	file:
MAIN	bin/coff2flat.c	17;"	d	file:
Read	bin/coff2flat.c	/^void Read(int fd, char *buf, int nBytes)$/;"	f
ReadStruct	bin/coff2flat.c	32;"	d	file:
StackSize	bin/coff2flat.c	31;"	d	file:
Write	bin/coff2flat.c	/^void Write(int fd, char *buf, int nBytes)$/;"	f
main	bin/coff2flat.c	/^main (int argc, char **argv)$/;"	f
MAIN	bin/coff2noff.c	23;"	d	file:
MAIN	bin/coff2noff.c	25;"	d	file:
Read	bin/coff2noff.c	/^void Read(int fd, char *buf, int nBytes)$/;"	f
ReadStruct	bin/coff2noff.c	70;"	d	file:
ShortToHost	bin/coff2noff.c	/^ShortToHost(unsigned short shortword) {$/;"	f
WordToHost	bin/coff2noff.c	/^WordToHost(unsigned int word) {$/;"	f
Write	bin/coff2noff.c	/^void Write(int fd, char *buf, int nBytes)$/;"	f
main	bin/coff2noff.c	/^int main (int argc, char **argv)$/;"	f
noffFileName	bin/coff2noff.c	/^char *noffFileName = NULL;$/;"	v
NULL	bin/d.c	11;"	d	file:
R	bin/d.c	27;"	d	file:
dump_ascii	bin/d.c	/^dump_ascii(instruction, pc)$/;"	f
longdis	bin/d.c	/^int longdis = 1;$/;"	v
regstrings	bin/d.c	/^char *regstrings[] =$/;"	v
sptr	bin/d.c	/^int sptr;$/;"	v
ASSOC	bin/disasm.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
LINESIZE	bin/disasm.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
LOADSECTION	bin/disasm.c	69;"	d	file:
LRD	bin/disasm.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
NROWS	bin/disasm.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
RAND	bin/disasm.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
Regtrace	bin/disasm.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
TRACE	bin/disasm.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
Traptrace	bin/disasm.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
bsshead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
datahead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
dis1	bin/disasm.c	/^dis1(xpc)$/;"	f
disasm	bin/disasm.c	/^disasm(startpc, argc, argv)$/;"	f
filename	bin/disasm.c	/^static char filename[1000] = "a.out";	\/* default a.out file *\/$/;"	v	file:
fp	bin/disasm.c	/^static FILE *fp;$/;"	v	file:
ldptr	bin/disasm.c	/^static LDFILE *ldptr;$/;"	v	file:
load_program	bin/disasm.c	/^load_program(filename)$/;"	f
load_section	bin/disasm.c	/^load_section(hd)$/;"	f
m_alloc	bin/disasm.c	/^int *m_alloc(n)$/;"	f
main	bin/disasm.c	/^main(argc, argv)$/;"	f
mem	bin/disasm.c	/^char mem[MEMSIZE];		\/* main memory. use malloc later *\/$/;"	v
pc	bin/disasm.c	/^int pc;$/;"	v
rdatahead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
sbsshead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
sdatahead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
self	bin/disasm.c	/^static char self[256];			\/* name of invoking program *\/$/;"	v	file:
texthead	bin/disasm.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
I_ADD	bin/encode.h	84;"	d
I_ADDI	bin/encode.h	20;"	d
I_ADDIU	bin/encode.h	21;"	d
I_ADDU	bin/encode.h	85;"	d
I_AND	bin/encode.h	88;"	d
I_ANDI	bin/encode.h	24;"	d
I_BCOND	bin/encode.h	13;"	d
I_BEQ	bin/encode.h	16;"	d
I_BGEZ	bin/encode.h	100;"	d
I_BGEZAL	bin/encode.h	103;"	d
I_BGTZ	bin/encode.h	19;"	d
I_BLEZ	bin/encode.h	18;"	d
I_BLTZ	bin/encode.h	99;"	d
I_BLTZAL	bin/encode.h	102;"	d
I_BNE	bin/encode.h	17;"	d
I_BREAK	bin/encode.h	72;"	d
I_COP0	bin/encode.h	28;"	d
I_COP1	bin/encode.h	29;"	d
I_COP2	bin/encode.h	30;"	d
I_COP3	bin/encode.h	31;"	d
I_DIV	bin/encode.h	81;"	d
I_DIVU	bin/encode.h	82;"	d
I_J	bin/encode.h	14;"	d
I_JAL	bin/encode.h	15;"	d
I_JALR	bin/encode.h	69;"	d
I_JR	bin/encode.h	68;"	d
I_LB	bin/encode.h	33;"	d
I_LBU	bin/encode.h	37;"	d
I_LH	bin/encode.h	34;"	d
I_LHU	bin/encode.h	38;"	d
I_LUI	bin/encode.h	27;"	d
I_LW	bin/encode.h	36;"	d
I_LWC0	bin/encode.h	48;"	d
I_LWC1	bin/encode.h	49;"	d
I_LWC2	bin/encode.h	50;"	d
I_LWC3	bin/encode.h	51;"	d
I_LWL	bin/encode.h	35;"	d
I_LWR	bin/encode.h	39;"	d
I_MFHI	bin/encode.h	74;"	d
I_MFLO	bin/encode.h	76;"	d
I_MTHI	bin/encode.h	75;"	d
I_MTLO	bin/encode.h	77;"	d
I_MULT	bin/encode.h	79;"	d
I_MULTU	bin/encode.h	80;"	d
I_NOP	bin/encode.h	107;"	d
I_NOR	bin/encode.h	91;"	d
I_OR	bin/encode.h	89;"	d
I_ORI	bin/encode.h	25;"	d
I_SB	bin/encode.h	41;"	d
I_SH	bin/encode.h	42;"	d
I_SLL	bin/encode.h	60;"	d
I_SLLV	bin/encode.h	64;"	d
I_SLT	bin/encode.h	93;"	d
I_SLTI	bin/encode.h	22;"	d
I_SLTIU	bin/encode.h	23;"	d
I_SLTU	bin/encode.h	94;"	d
I_SPECIAL	bin/encode.h	12;"	d
I_SRA	bin/encode.h	63;"	d
I_SRAV	bin/encode.h	67;"	d
I_SRL	bin/encode.h	62;"	d
I_SRLV	bin/encode.h	66;"	d
I_SUB	bin/encode.h	86;"	d
I_SUBU	bin/encode.h	87;"	d
I_SW	bin/encode.h	44;"	d
I_SWC0	bin/encode.h	53;"	d
I_SWC1	bin/encode.h	54;"	d
I_SWC2	bin/encode.h	55;"	d
I_SWC3	bin/encode.h	56;"	d
I_SWL	bin/encode.h	43;"	d
I_SWR	bin/encode.h	46;"	d
I_SYSCALL	bin/encode.h	71;"	d
I_XOR	bin/encode.h	90;"	d
I_XORI	bin/encode.h	26;"	d
FAST	bin/execute.c	14;"	d	file:
HI	bin/execute.c	/^int HI, LO;			\/* mul\/div machine registers *\/$/;"	v
IM	bin/execute.c	/^IM(i)$/;"	f
LO	bin/execute.c	/^int HI, LO;			\/* mul\/div machine registers *\/$/;"	v
NH	bin/execute.c	465;"	d	file:
NNN	bin/execute.c	466;"	d	file:
NNNN	bin/execute.c	555;"	d	file:
RD	bin/execute.c	/^RD(i)$/;"	f
RS	bin/execute.c	/^RS(i)$/;"	f
RT	bin/execute.c	/^RT(i)$/;"	f
Reg	bin/execute.c	/^int Reg[32];			\/* GPR's *\/$/;"	v
addtable	bin/execute.c	/^int addtable[33][33];$/;"	v
arch1cycles	bin/execute.c	/^int arch1cycles;$/;"	v
b31	bin/execute.c	31;"	d	file:
cc_add	bin/execute.c	34;"	d	file:
cc_logic	bin/execute.c	48;"	d	file:
cc_mulscc	bin/execute.c	54;"	d	file:
cc_sub	bin/execute.c	40;"	d	file:
dump_reg	bin/execute.c	/^dump_reg()$/;"	f
false	bin/execute.c	16;"	d	file:
fmt	bin/execute.c	/^char fmt[] = "%6d";$/;"	v
fmt2	bin/execute.c	/^char fmt2[] = "------";$/;"	v
henter	bin/execute.c	/^henter(n)$/;"	f
henters	bin/execute.c	/^void henters(n, hist)$/;"	f
hist	bin/execute.c	/^static int hist[NNNN];$/;"	v	file:
hists	bin/execute.c	/^static int hists[NH][NNN];$/;"	v	file:
hoflo	bin/execute.c	/^int hoflo[NH], htotal[NH];$/;"	v
hprint	bin/execute.c	/^hprint()$/;"	f
htotal	bin/execute.c	/^int hoflo[NH], htotal[NH];$/;"	v
ilog2	bin/execute.c	/^ilog2(i)$/;"	f
numadds	bin/execute.c	/^int numadds=1, numsubs=1, numsuccesses, numcarries;$/;"	v
numcarries	bin/execute.c	/^int numadds=1, numsubs=1, numsuccesses, numcarries;$/;"	v
numjmpls	bin/execute.c	/^int numjmpls;$/;"	v
numsubs	bin/execute.c	/^int numadds=1, numsubs=1, numsuccesses, numcarries;$/;"	v
numsuccesses	bin/execute.c	/^int numadds=1, numsubs=1, numsuccesses, numcarries;$/;"	v
ny	bin/execute.c	/^ny()$/;"	f
patable	bin/execute.c	/^patable(tab)$/;"	f
printhist	bin/execute.c	/^printhist()$/;"	f
printstatistics	bin/execute.c	/^printstatistics()$/;"	f
runprogram	bin/execute.c	/^runprogram(startpc, argc, argv)$/;"	f
subtable	bin/execute.c	/^int subtable[33][33];$/;"	v
true	bin/execute.c	15;"	d	file:
u	bin/execute.c	/^u()				\/* unimplemented *\/$/;"	f
extend	bin/instr.h	21;"	d
immed	bin/instr.h	15;"	d
off16	bin/instr.h	19;"	d
off26	bin/instr.h	17;"	d
rd	bin/instr.h	11;"	d
rs	bin/instr.h	13;"	d
rt	bin/instr.h	12;"	d
shamt	bin/instr.h	14;"	d
top4	bin/instr.h	18;"	d
MEMSIZE	bin/int.h	11;"	d
amark	bin/int.h	15;"	d
cfetch	bin/int.h	22;"	d
cstore	bin/int.h	29;"	d
fetch	bin/int.h	19;"	d
ifetch	bin/int.h	18;"	d
imark	bin/int.h	16;"	d
memoffset	bin/int.h	12;"	d
sfetch	bin/int.h	20;"	d
sstore	bin/int.h	27;"	d
store	bin/int.h	25;"	d
ucfetch	bin/int.h	23;"	d
usfetch	bin/int.h	21;"	d
ASSOC	bin/main.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
LINESIZE	bin/main.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
LOADSECTION	bin/main.c	112;"	d	file:
LRD	bin/main.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
NROWS	bin/main.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
RAND	bin/main.c	/^int NROWS=64, ASSOC=1, LINESIZE=4, RAND=0, LRD=0;$/;"	v
Regtrace	bin/main.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
TRACE	bin/main.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
Traptrace	bin/main.c	/^int TRACE, Traptrace, Regtrace;$/;"	v
bsshead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
datahead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
filename	bin/main.c	/^static char filename[1000] = "a.out";	\/* default a.out file *\/$/;"	v	file:
fp	bin/main.c	/^static FILE *fp;$/;"	v	file:
ldptr	bin/main.c	/^static LDFILE *ldptr;$/;"	v	file:
load_program	bin/main.c	/^load_program(filename)$/;"	f
m_alloc	bin/main.c	/^int *m_alloc(n)$/;"	f
main	bin/main.c	/^main(argc, argv)$/;"	f
mem	bin/main.c	/^char mem[MEMSIZE];		\/* main memory. use malloc later *\/$/;"	v
rdatahead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
sbsshead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
sdatahead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
self	bin/main.c	/^static char self[256];			\/* name of invoking program *\/$/;"	v	file:
string	bin/main.c	/^char *string(s)$/;"	f
texthead	bin/main.c	/^static SCNHDR texthead, rdatahead, datahead, sdatahead, sbsshead, bsshead;$/;"	v	file:
NOFFMAGIC	bin/noff.h	8;"	d
NoffHeader	bin/noff.h	/^} NoffHeader;$/;"	t	typeref:struct:noffHeader
Segment	bin/noff.h	/^} Segment;$/;"	t	typeref:struct:segment
code	bin/noff.h	/^   Segment code;		\/* executable code segment *\/ $/;"	m	struct:noffHeader
inFileAddr	bin/noff.h	/^  int inFileAddr;		\/* location of segment in this file *\/$/;"	m	struct:segment
initData	bin/noff.h	/^   Segment initData;		\/* initialized data segment *\/$/;"	m	struct:noffHeader
noffHeader	bin/noff.h	/^typedef struct noffHeader {$/;"	s
noffMagic	bin/noff.h	/^   int noffMagic;		\/* should be NOFFMAGIC *\/$/;"	m	struct:noffHeader
segment	bin/noff.h	/^typedef struct segment {$/;"	s
size	bin/noff.h	/^  int size;			\/* size of segment *\/$/;"	m	struct:segment
uninitData	bin/noff.h	/^   Segment uninitData;		\/* uninitialized data segment --$/;"	m	struct:noffHeader
virtualAddr	bin/noff.h	/^  int virtualAddr;		\/* location of segment in virt addr space *\/$/;"	m	struct:segment
normalops	bin/opstrings.c	/^char *normalops[] = {$/;"	v
specialops	bin/opstrings.c	/^char *specialops[] = {$/;"	v
MAIN	bin/out.c	7;"	d	file:
MAIN	bin/out.c	9;"	d	file:
MAXDATA	bin/out.c	34;"	d	file:
MAXRELOCS	bin/out.c	31;"	d	file:
MAXSCNS	bin/out.c	43;"	d	file:
MAXSSPACE	bin/out.c	45;"	d	file:
MAXSYMS	bin/out.c	44;"	d	file:
aouthdr	bin/out.c	/^struct aouthdr aouthdr;$/;"	v	typeref:struct:aouthdr
column	bin/out.c	/^static column = 1;$/;"	v	file:
data	bin/out.c	/^  long data[MAXDATA];$/;"	m	struct:data	file:
data	bin/out.c	/^struct data {$/;"	s	file:
filehdr	bin/out.c	/^struct filehdr filehdr;$/;"	v	typeref:struct:filehdr
length	bin/out.c	/^  int length;$/;"	m	struct:data	file:
main	bin/out.c	/^main(argc,argv)$/;"	f
myprintf	bin/out.c	/^myprintf(va_alist)$/;"	f
mysetfile	bin/out.c	/^mysetfile(f)$/;"	f
mytab	bin/out.c	/^mytab(n)$/;"	f
outfile	bin/out.c	/^static FILE *outfile = stdout;$/;"	v	file:
print_reloc	bin/out.c	/^print_reloc(vaddr,i,j)$/;"	f
print_section	bin/out.c	/^print_section(i)$/;"	f
printf	bin/out.c	190;"	d	file:
read_struct	bin/out.c	29;"	d	file:
reloc	bin/out.c	/^  struct reloc reloc[MAXRELOCS];$/;"	m	struct:data	typeref:struct:data::reloc	file:
reloc_type	bin/out.c	/^char *reloc_type[] = {$/;"	v
relocs	bin/out.c	/^  int relocs;$/;"	m	struct:data	file:
scnhdr	bin/out.c	/^struct scnhdr scnhdr[MAXSCNS];$/;"	v	typeref:struct:scnhdr
section	bin/out.c	/^struct data section[MAXSCNS];$/;"	v	typeref:struct:data
section_name	bin/out.c	/^char *section_name[] = {$/;"	v
sspace	bin/out.c	/^char sspace[20000];$/;"	v
storage_class	bin/out.c	/^char *storage_class[] = {$/;"	v
symbol_type	bin/out.c	/^char *symbol_type[] = {$/;"	v
symbols	bin/out.c	/^EXTR symbols[MAXSYMS];$/;"	v
symhdr	bin/out.c	/^HDRR symhdr;$/;"	v
IOCPARM_MASK	bin/system.c	89;"	d	file:
system_break	bin/system.c	/^system_break()$/;"	f
system_trap	bin/system.c	/^system_trap()$/;"	f
u_to_int_addr	bin/system.c	/^char *u_to_int_addr(ptr)$/;"	f
u_to_int_fd	bin/system.c	/^u_to_int_fd(fd)$/;"	f
AUTOLOAD_CPPFLAGS	build/Makefile	/^AUTOLOAD_CPPFLAGS=-DCHANGED$/;"	m
AUTOLOAD_KERNELS	build/Makefile	/^AUTOLOAD_KERNELS=$(USER_FLAVORS)$/;"	m
AUTOLOAD_USERPROGS	build/Makefile	/^AUTOLOAD_USERPROGS=all$/;"	m
Add	filesys/directory.cc	/^Directory::Add(const char *name, int newSector)$/;"	f	class:Directory
Directory	filesys/directory.cc	/^Directory::Directory(int size)$/;"	f	class:Directory
FetchFrom	filesys/directory.cc	/^Directory::FetchFrom(OpenFile *file)$/;"	f	class:Directory
Find	filesys/directory.cc	/^Directory::Find(const char *name)$/;"	f	class:Directory
FindIndex	filesys/directory.cc	/^Directory::FindIndex(const char *name)$/;"	f	class:Directory
List	filesys/directory.cc	/^Directory::List()$/;"	f	class:Directory
Print	filesys/directory.cc	/^Directory::Print()$/;"	f	class:Directory
Remove	filesys/directory.cc	/^Directory::Remove(const char *name)$/;"	f	class:Directory
WriteBack	filesys/directory.cc	/^Directory::WriteBack(OpenFile *file)$/;"	f	class:Directory
~Directory	filesys/directory.cc	/^Directory::~Directory()$/;"	f	class:Directory
DIRECTORY_H	filesys/directory.h	18;"	d
Directory	filesys/directory.h	/^class Directory {$/;"	c
DirectoryEntry	filesys/directory.h	/^class DirectoryEntry {$/;"	c
FileNameMaxLen	filesys/directory.h	22;"	d
inUse	filesys/directory.h	/^    bool inUse;				\/\/ Is this directory entry in use?$/;"	m	class:DirectoryEntry
name	filesys/directory.h	/^    char name[FileNameMaxLen + 1];	\/\/ Text name for file, with +1 for $/;"	m	class:DirectoryEntry
sector	filesys/directory.h	/^    int sector;				\/\/ Location on disk to find the $/;"	m	class:DirectoryEntry
table	filesys/directory.h	/^    DirectoryEntry *table;		\/\/ Table of pairs: $/;"	m	class:Directory
tableSize	filesys/directory.h	/^    int tableSize;			\/\/ Number of directory entries$/;"	m	class:Directory
Allocate	filesys/filehdr.cc	/^FileHeader::Allocate(BitMap *freeMap, int fileSize)$/;"	f	class:FileHeader
ByteToSector	filesys/filehdr.cc	/^FileHeader::ByteToSector(int offset)$/;"	f	class:FileHeader
Deallocate	filesys/filehdr.cc	/^FileHeader::Deallocate(BitMap *freeMap)$/;"	f	class:FileHeader
FetchFrom	filesys/filehdr.cc	/^FileHeader::FetchFrom(int sector)$/;"	f	class:FileHeader
FileLength	filesys/filehdr.cc	/^FileHeader::FileLength()$/;"	f	class:FileHeader
Print	filesys/filehdr.cc	/^FileHeader::Print()$/;"	f	class:FileHeader
WriteBack	filesys/filehdr.cc	/^FileHeader::WriteBack(int sector)$/;"	f	class:FileHeader
FILEHDR_H	filesys/filehdr.h	15;"	d
FileHeader	filesys/filehdr.h	/^class FileHeader {$/;"	c
MaxFileSize	filesys/filehdr.h	21;"	d
NumDirect	filesys/filehdr.h	20;"	d
dataSectors	filesys/filehdr.h	/^    int dataSectors[NumDirect];		\/\/ Disk sector numbers for each data $/;"	m	class:FileHeader
numBytes	filesys/filehdr.h	/^    int numBytes;			\/\/ Number of bytes in the file$/;"	m	class:FileHeader
numSectors	filesys/filehdr.h	/^    int numSectors;			\/\/ Number of data sectors in the file$/;"	m	class:FileHeader
Create	filesys/filesys.cc	/^FileSystem::Create(const char *name, int initialSize)$/;"	f	class:FileSystem
DirectoryFileSize	filesys/filesys.cc	65;"	d	file:
DirectorySector	filesys/filesys.cc	58;"	d	file:
FileSystem	filesys/filesys.cc	/^FileSystem::FileSystem(bool format)$/;"	f	class:FileSystem
FreeMapFileSize	filesys/filesys.cc	63;"	d	file:
FreeMapSector	filesys/filesys.cc	57;"	d	file:
List	filesys/filesys.cc	/^FileSystem::List()$/;"	f	class:FileSystem
NumDirEntries	filesys/filesys.cc	64;"	d	file:
Open	filesys/filesys.cc	/^FileSystem::Open(const char *name)$/;"	f	class:FileSystem
Print	filesys/filesys.cc	/^FileSystem::Print()$/;"	f	class:FileSystem
Remove	filesys/filesys.cc	/^FileSystem::Remove(const char *name)$/;"	f	class:FileSystem
Create	filesys/filesys.h	/^    bool Create(const char *name, int initialSize) { $/;"	f	class:FileSystem
FS_H	filesys/filesys.h	36;"	d
FileSystem	filesys/filesys.h	/^    FileSystem(bool format) {}$/;"	f	class:FileSystem
FileSystem	filesys/filesys.h	/^class FileSystem {$/;"	c
Open	filesys/filesys.h	/^    OpenFile* Open(char *name) {$/;"	f	class:FileSystem
Remove	filesys/filesys.h	/^    bool Remove(char *name) { return Unlink(name) == 0; }$/;"	f	class:FileSystem
directoryFile	filesys/filesys.h	/^   OpenFile* directoryFile;		\/\/ "Root" directory -- list of $/;"	m	class:FileSystem
freeMapFile	filesys/filesys.h	/^   OpenFile* freeMapFile;		\/\/ Bit map of free disk blocks,$/;"	m	class:FileSystem
ContentSize	filesys/fstest.cc	113;"	d	file:
Contents	filesys/fstest.cc	112;"	d	file:
Copy	filesys/fstest.cc	/^Copy(const char *from, const char *to)$/;"	f
FileName	filesys/fstest.cc	111;"	d	file:
FileRead	filesys/fstest.cc	/^FileRead()$/;"	f	file:
FileSize	filesys/fstest.cc	114;"	d	file:
FileWrite	filesys/fstest.cc	/^FileWrite()$/;"	f	file:
PerformanceTest	filesys/fstest.cc	/^PerformanceTest()$/;"	f
Print	filesys/fstest.cc	/^Print(char *name)$/;"	f
TransferSize	filesys/fstest.cc	24;"	d	file:
Length	filesys/openfile.cc	/^OpenFile::Length() $/;"	f	class:OpenFile
OpenFile	filesys/openfile.cc	/^OpenFile::OpenFile(int sector)$/;"	f	class:OpenFile
Read	filesys/openfile.cc	/^OpenFile::Read(char *into, int numBytes)$/;"	f	class:OpenFile
ReadAt	filesys/openfile.cc	/^OpenFile::ReadAt(char *into, int numBytes, int position)$/;"	f	class:OpenFile
Seek	filesys/openfile.cc	/^OpenFile::Seek(int position)$/;"	f	class:OpenFile
Write	filesys/openfile.cc	/^OpenFile::Write(const char *into, int numBytes)$/;"	f	class:OpenFile
WriteAt	filesys/openfile.cc	/^OpenFile::WriteAt(const char *from, int numBytes, int position)$/;"	f	class:OpenFile
~OpenFile	filesys/openfile.cc	/^OpenFile::~OpenFile()$/;"	f	class:OpenFile
Length	filesys/openfile.h	/^    int Length() { Lseek(file, 0, 2); return Tell(file); }$/;"	f	class:OpenFile
OPENFILE_H	filesys/openfile.h	21;"	d
OpenFile	filesys/openfile.h	/^    OpenFile(int f) { file = f; currentOffset = 0; }	\/\/ open the file$/;"	f	class:OpenFile
OpenFile	filesys/openfile.h	/^class OpenFile {$/;"	c
Read	filesys/openfile.h	/^    int Read(char *into, int numBytes) {$/;"	f	class:OpenFile
ReadAt	filesys/openfile.h	/^    int ReadAt(char *into, int numBytes, int position) { $/;"	f	class:OpenFile
Write	filesys/openfile.h	/^    int Write(const char *from, int numBytes) {$/;"	f	class:OpenFile
WriteAt	filesys/openfile.h	/^    int WriteAt(const char *from, int numBytes, int position) { $/;"	f	class:OpenFile
currentOffset	filesys/openfile.h	/^    int currentOffset;$/;"	m	class:OpenFile
file	filesys/openfile.h	/^    int file;$/;"	m	class:OpenFile
hdr	filesys/openfile.h	/^    FileHeader *hdr;			\/\/ Header for this file $/;"	m	class:OpenFile
seekPosition	filesys/openfile.h	/^    int seekPosition;			\/\/ Current position within the file$/;"	m	class:OpenFile
~OpenFile	filesys/openfile.h	/^    ~OpenFile() { Close(file); }			\/\/ close the file$/;"	f	class:OpenFile
DiskRequestDone	filesys/synchdisk.cc	/^DiskRequestDone (int arg)$/;"	f	file:
ReadSector	filesys/synchdisk.cc	/^SynchDisk::ReadSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
RequestDone	filesys/synchdisk.cc	/^SynchDisk::RequestDone()$/;"	f	class:SynchDisk
SynchDisk	filesys/synchdisk.cc	/^SynchDisk::SynchDisk(const char* name)$/;"	f	class:SynchDisk
WriteSector	filesys/synchdisk.cc	/^SynchDisk::WriteSector(int sectorNumber, char* data)$/;"	f	class:SynchDisk
~SynchDisk	filesys/synchdisk.cc	/^SynchDisk::~SynchDisk()$/;"	f	class:SynchDisk
SYNCHDISK_H	filesys/synchdisk.h	12;"	d
SynchDisk	filesys/synchdisk.h	/^class SynchDisk {$/;"	c
disk	filesys/synchdisk.h	/^    Disk *disk;		  		\/\/ Raw disk device$/;"	m	class:SynchDisk
lock	filesys/synchdisk.h	/^    Lock *lock;		  		\/\/ Only one read\/write request$/;"	m	class:SynchDisk
semaphore	filesys/synchdisk.h	/^    Semaphore *semaphore; 		\/\/ To synchronize requesting thread $/;"	m	class:SynchDisk
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
CheckCharAvail	machine/console.cc	/^Console::CheckCharAvail()$/;"	f	class:Console
Console	machine/console.cc	/^Console::Console(char *readFile, char *writeFile, VoidFunctionPtr readAvail, $/;"	f	class:Console
ConsoleReadPoll	machine/console.cc	/^static void ConsoleReadPoll(int c) $/;"	f	file:
ConsoleWriteDone	machine/console.cc	/^static void ConsoleWriteDone(int c)$/;"	f	file:
GetChar	machine/console.cc	/^Console::GetChar()$/;"	f	class:Console
PutChar	machine/console.cc	/^Console::PutChar(char ch)$/;"	f	class:Console
WriteDone	machine/console.cc	/^Console::WriteDone()$/;"	f	class:Console
~Console	machine/console.cc	/^Console::~Console()$/;"	f	class:Console
CONSOLE_H	machine/console.h	24;"	d
Console	machine/console.h	/^class Console {$/;"	c
handlerArg	machine/console.h	/^    int handlerArg;			\/\/ argument to be passed to the $/;"	m	class:Console
incoming	machine/console.h	/^    char incoming;    			\/\/ Contains the character to be read,$/;"	m	class:Console
putBusy	machine/console.h	/^    bool putBusy;    			\/\/ Is a PutChar operation in progress?$/;"	m	class:Console
readFileNo	machine/console.h	/^    int readFileNo;			\/\/ UNIX file emulating the keyboard $/;"	m	class:Console
readHandler	machine/console.h	/^    VoidFunctionPtr readHandler; 	\/\/ Interrupt handler to call when $/;"	m	class:Console
writeFileNo	machine/console.h	/^    int writeFileNo;			\/\/ UNIX file emulating the display$/;"	m	class:Console
writeHandler	machine/console.h	/^    VoidFunctionPtr writeHandler; 	\/\/ Interrupt handler to call when $/;"	m	class:Console
ComputeLatency	machine/disk.cc	/^Disk::ComputeLatency(int newSector, bool writing)$/;"	f	class:Disk
Disk	machine/disk.cc	/^Disk::Disk(const char* name, VoidFunctionPtr callWhenDone, int callArg)$/;"	f	class:Disk
DiskDone	machine/disk.cc	/^static void DiskDone(int arg) { ((Disk *)arg)->HandleInterrupt(); }$/;"	f	file:
DiskSize	machine/disk.cc	26;"	d	file:
HandleInterrupt	machine/disk.cc	/^Disk::HandleInterrupt ()$/;"	f	class:Disk
MagicNumber	machine/disk.cc	23;"	d	file:
MagicSize	machine/disk.cc	24;"	d	file:
ModuloDiff	machine/disk.cc	/^Disk::ModuloDiff(int to, int from)$/;"	f	class:Disk
PrintSector	machine/disk.cc	/^PrintSector (bool writing, int sector, char *data)$/;"	f	file:
ReadRequest	machine/disk.cc	/^Disk::ReadRequest(int sectorNumber, char* data)$/;"	f	class:Disk
TimeToSeek	machine/disk.cc	/^Disk::TimeToSeek(int newSector, int *rotation) $/;"	f	class:Disk
UpdateLast	machine/disk.cc	/^Disk::UpdateLast(int newSector)$/;"	f	class:Disk
WriteRequest	machine/disk.cc	/^Disk::WriteRequest(int sectorNumber, char* data)$/;"	f	class:Disk
~Disk	machine/disk.cc	/^Disk::~Disk()$/;"	f	class:Disk
DISK_H	machine/disk.h	18;"	d
Disk	machine/disk.h	/^class Disk {$/;"	c
NumSectors	machine/disk.h	52;"	d
NumTracks	machine/disk.h	51;"	d
SectorSize	machine/disk.h	49;"	d
SectorsPerTrack	machine/disk.h	50;"	d
active	machine/disk.h	/^    bool active;     			\/\/ Is a disk operation in progress?$/;"	m	class:Disk
bufferInit	machine/disk.h	/^    int bufferInit;			\/\/ When the track buffer started $/;"	m	class:Disk
fileno	machine/disk.h	/^    int fileno;				\/\/ UNIX file number for simulated disk $/;"	m	class:Disk
handler	machine/disk.h	/^    VoidFunctionPtr handler;		\/\/ Interrupt handler, to be invoked $/;"	m	class:Disk
handlerArg	machine/disk.h	/^    int handlerArg;			\/\/ Argument to interrupt handler $/;"	m	class:Disk
lastSector	machine/disk.h	/^    int lastSector;			\/\/ The previous disk request $/;"	m	class:Disk
ChangeLevel	machine/interrupt.cc	/^Interrupt::ChangeLevel(IntStatus old, IntStatus now)$/;"	f	class:Interrupt
CheckIfDue	machine/interrupt.cc	/^Interrupt::CheckIfDue(bool advanceClock)$/;"	f	class:Interrupt
DumpState	machine/interrupt.cc	/^Interrupt::DumpState()$/;"	f	class:Interrupt
Enable	machine/interrupt.cc	/^Interrupt::Enable()$/;"	f	class:Interrupt
Halt	machine/interrupt.cc	/^Interrupt::Halt()$/;"	f	class:Interrupt
Idle	machine/interrupt.cc	/^Interrupt::Idle()$/;"	f	class:Interrupt
Interrupt	machine/interrupt.cc	/^Interrupt::Interrupt()$/;"	f	class:Interrupt
OneTick	machine/interrupt.cc	/^Interrupt::OneTick()$/;"	f	class:Interrupt
PendingInterrupt	machine/interrupt.cc	/^PendingInterrupt::PendingInterrupt(VoidFunctionPtr func, int param, long long time, $/;"	f	class:PendingInterrupt
PrintPending	machine/interrupt.cc	/^PrintPending(int arg)$/;"	f	file:
Schedule	machine/interrupt.cc	/^Interrupt::Schedule(VoidFunctionPtr handler, int arg, long long fromNow, IntType type)$/;"	f	class:Interrupt
SetLevel	machine/interrupt.cc	/^Interrupt::SetLevel(IntStatus now)$/;"	f	class:Interrupt
YieldOnReturn	machine/interrupt.cc	/^Interrupt::YieldOnReturn()$/;"	f	class:Interrupt
intLevelNames	machine/interrupt.cc	/^static const char *intLevelNames[] = { "off", "on"};$/;"	v	file:
intTypeNames	machine/interrupt.cc	/^static const char *intTypeNames[] = { "timer", "disk", "console write", $/;"	v	file:
~Interrupt	machine/interrupt.cc	/^Interrupt::~Interrupt()$/;"	f	class:Interrupt
ConsoleReadInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
ConsoleWriteInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
DiskInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
INTERRUPT_H	machine/interrupt.h	36;"	d
IdleMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
IntOff	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntOn	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	e	enum:IntStatus
IntStatus	machine/interrupt.h	/^enum IntStatus { IntOff, IntOn };$/;"	g
IntType	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	g
Interrupt	machine/interrupt.h	/^class Interrupt {$/;"	c
MachineStatus	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	g
NetworkRecvInt	machine/interrupt.h	/^				NetworkSendInt, NetworkRecvInt};$/;"	e	enum:IntType
NetworkSendInt	machine/interrupt.h	/^				NetworkSendInt, NetworkRecvInt};$/;"	e	enum:IntType
PendingInterrupt	machine/interrupt.h	/^class PendingInterrupt {$/;"	c
SystemMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
TimerInt	machine/interrupt.h	/^enum IntType { TimerInt, DiskInt, ConsoleWriteInt, ConsoleReadInt, $/;"	e	enum:IntType
UserMode	machine/interrupt.h	/^enum MachineStatus {IdleMode, SystemMode, UserMode};$/;"	e	enum:MachineStatus
arg	machine/interrupt.h	/^    int arg;                    \/\/ The argument to the function.$/;"	m	class:PendingInterrupt
getLevel	machine/interrupt.h	/^    IntStatus getLevel() {return level;}\/\/ Return whether interrupts$/;"	f	class:Interrupt
getStatus	machine/interrupt.h	/^    MachineStatus getStatus() { return status; } \/\/ idle, kernel, user$/;"	f	class:Interrupt
handler	machine/interrupt.h	/^    VoidFunctionPtr handler;    \/\/ The function (in the hardware device$/;"	m	class:PendingInterrupt
inHandler	machine/interrupt.h	/^    bool inHandler;		\/\/ TRUE if we are running an interrupt handler$/;"	m	class:Interrupt
level	machine/interrupt.h	/^    IntStatus level;		\/\/ are interrupts enabled or disabled?$/;"	m	class:Interrupt
pending	machine/interrupt.h	/^    List *pending;		\/\/ the list of interrupts scheduled$/;"	m	class:Interrupt
setStatus	machine/interrupt.h	/^    void setStatus(MachineStatus st) { status = st; }$/;"	f	class:Interrupt
status	machine/interrupt.h	/^    MachineStatus status;	\/\/ idle, kernel mode, user mode$/;"	m	class:Interrupt
type	machine/interrupt.h	/^    IntType type;		\/\/ for debugging$/;"	m	class:PendingInterrupt
when	machine/interrupt.h	/^    long long when;		\/\/ When the interrupt is supposed to fire$/;"	m	class:PendingInterrupt
yieldOnReturn	machine/interrupt.h	/^    bool yieldOnReturn; 	\/\/ TRUE if we are to context switch$/;"	m	class:Interrupt
CheckEndian	machine/machine.cc	/^void CheckEndian()$/;"	f	file:
Debugger	machine/machine.cc	/^void Machine::Debugger()$/;"	f	class:Machine
DumpState	machine/machine.cc	/^Machine::DumpState()$/;"	f	class:Machine
Machine	machine/machine.cc	/^Machine::Machine(bool debug)$/;"	f	class:Machine
RaiseException	machine/machine.cc	/^Machine::RaiseException(ExceptionType which, int badVAddr)$/;"	f	class:Machine
ReadRegister	machine/machine.cc	/^int Machine::ReadRegister(int num)$/;"	f	class:Machine
WriteRegister	machine/machine.cc	/^void Machine::WriteRegister(int num, int value)$/;"	f	class:Machine
exceptionNames	machine/machine.cc	/^static const char* exceptionNames[] = { "no exception", "syscall", $/;"	v	file:
~Machine	machine/machine.cc	/^Machine::~Machine()$/;"	f	class:Machine
AddressErrorException	machine/machine.h	/^		     AddressErrorException, \/\/ Unaligned reference or one that$/;"	e	enum:ExceptionType
BadVAddrReg	machine/machine.h	70;"	d
BusErrorException	machine/machine.h	/^		     BusErrorException,     \/\/ Translation resulted in an $/;"	e	enum:ExceptionType
ExceptionType	machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	g
HiReg	machine/machine.h	63;"	d
IllegalInstrException	machine/machine.h	/^		     IllegalInstrException, \/\/ Unimplemented or reserved instr.$/;"	e	enum:ExceptionType
Instruction	machine/machine.h	/^class Instruction {$/;"	c
LoReg	machine/machine.h	64;"	d
LoadReg	machine/machine.h	68;"	d
LoadValueReg	machine/machine.h	69;"	d
MACHINE_H	machine/machine.h	22;"	d
Machine	machine/machine.h	/^class Machine {$/;"	c
MemorySize	machine/machine.h	36;"	d
NextPCReg	machine/machine.h	66;"	d
NoException	machine/machine.h	/^enum ExceptionType { NoException,           \/\/ Everything ok!$/;"	e	enum:ExceptionType
NumExceptionTypes	machine/machine.h	/^		     NumExceptionTypes$/;"	e	enum:ExceptionType
NumGPRegs	machine/machine.h	62;"	d
NumPhysPages	machine/machine.h	35;"	d
NumTotalRegs	machine/machine.h	72;"	d
OverflowException	machine/machine.h	/^		     OverflowException,     \/\/ Integer overflow in add or sub.$/;"	e	enum:ExceptionType
PCReg	machine/machine.h	65;"	d
PageFaultException	machine/machine.h	/^		     PageFaultException,    \/\/ No valid translation found$/;"	e	enum:ExceptionType
PageSize	machine/machine.h	31;"	d
PrevPCReg	machine/machine.h	67;"	d
ReadOnlyException	machine/machine.h	/^		     ReadOnlyException,     \/\/ Write attempted to page marked $/;"	e	enum:ExceptionType
RetAddrReg	machine/machine.h	61;"	d
StackReg	machine/machine.h	60;"	d
SyscallException	machine/machine.h	/^		     SyscallException,      \/\/ A program executed a system call.$/;"	e	enum:ExceptionType
TLBSize	machine/machine.h	37;"	d
extra	machine/machine.h	/^    int extra;       \/\/ Immediate or target or shamt field or offset.$/;"	m	class:Instruction
mainMemory	machine/machine.h	/^    char *mainMemory;		\/\/ physical memory to store user program,$/;"	m	class:Machine
opCode	machine/machine.h	/^   unsigned char opCode;     \/\/ Type of instruction.  This is NOT the same as the$/;"	m	class:Instruction
pageTable	machine/machine.h	/^    TranslationEntry *pageTable;$/;"	m	class:Machine
pageTableSize	machine/machine.h	/^    unsigned int pageTableSize;$/;"	m	class:Machine
rd	machine/machine.h	/^   unsigned  char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction
registers	machine/machine.h	/^    int registers[NumTotalRegs]; \/\/ CPU registers, for executing user programs$/;"	m	class:Machine
rs	machine/machine.h	/^   unsigned  char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction
rt	machine/machine.h	/^   unsigned  char rs, rt, rd; \/\/ Three registers from instruction.$/;"	m	class:Instruction
runUntilTime	machine/machine.h	/^    int runUntilTime;		\/\/ drop back into the debugger when simulated$/;"	m	class:Machine
singleStep	machine/machine.h	/^    bool singleStep;		\/\/ drop back into the debugger after each$/;"	m	class:Machine
tlb	machine/machine.h	/^    TranslationEntry *tlb;		\/\/ this pointer should be considered $/;"	m	class:Machine
value	machine/machine.h	/^    unsigned int value; \/\/ binary representation of the instruction$/;"	m	class:Instruction
Decode	machine/mipssim.cc	/^Instruction::Decode()$/;"	f	class:Instruction
DelayedLoad	machine/mipssim.cc	/^Machine::DelayedLoad(int nextReg, int nextValue)$/;"	f	class:Machine
Mult	machine/mipssim.cc	/^Mult(int a, int b, bool signedArith, int* hiPtr, int* loPtr)$/;"	f	file:
OneInstruction	machine/mipssim.cc	/^Machine::OneInstruction(Instruction *instr)$/;"	f	class:Machine
Run	machine/mipssim.cc	/^Machine::Run()$/;"	f	class:Machine
TypeToReg	machine/mipssim.cc	/^TypeToReg(RegType reg, Instruction *instr)$/;"	f	file:
BCOND	machine/mipssim.h	106;"	d
EXTRA	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
IFMT	machine/mipssim.h	108;"	d
IndexToAddr	machine/mipssim.h	94;"	d
JFMT	machine/mipssim.h	109;"	d
MIPSSIM_H	machine/mipssim.h	11;"	d
MaxOpcode	machine/mipssim.h	88;"	d
NONE	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
OP_ADD	machine/mipssim.h	25;"	d
OP_ADDI	machine/mipssim.h	26;"	d
OP_ADDIU	machine/mipssim.h	27;"	d
OP_ADDU	machine/mipssim.h	28;"	d
OP_AND	machine/mipssim.h	29;"	d
OP_ANDI	machine/mipssim.h	30;"	d
OP_BEQ	machine/mipssim.h	31;"	d
OP_BGEZ	machine/mipssim.h	32;"	d
OP_BGEZAL	machine/mipssim.h	33;"	d
OP_BGTZ	machine/mipssim.h	34;"	d
OP_BLEZ	machine/mipssim.h	35;"	d
OP_BLTZ	machine/mipssim.h	36;"	d
OP_BLTZAL	machine/mipssim.h	37;"	d
OP_BNE	machine/mipssim.h	38;"	d
OP_DIV	machine/mipssim.h	40;"	d
OP_DIVU	machine/mipssim.h	41;"	d
OP_J	machine/mipssim.h	42;"	d
OP_JAL	machine/mipssim.h	43;"	d
OP_JALR	machine/mipssim.h	44;"	d
OP_JR	machine/mipssim.h	45;"	d
OP_LB	machine/mipssim.h	46;"	d
OP_LBU	machine/mipssim.h	47;"	d
OP_LH	machine/mipssim.h	48;"	d
OP_LHU	machine/mipssim.h	49;"	d
OP_LUI	machine/mipssim.h	50;"	d
OP_LW	machine/mipssim.h	51;"	d
OP_LWL	machine/mipssim.h	52;"	d
OP_LWR	machine/mipssim.h	53;"	d
OP_MFHI	machine/mipssim.h	55;"	d
OP_MFLO	machine/mipssim.h	56;"	d
OP_MTHI	machine/mipssim.h	58;"	d
OP_MTLO	machine/mipssim.h	59;"	d
OP_MULT	machine/mipssim.h	60;"	d
OP_MULTU	machine/mipssim.h	61;"	d
OP_NOR	machine/mipssim.h	62;"	d
OP_OR	machine/mipssim.h	63;"	d
OP_ORI	machine/mipssim.h	64;"	d
OP_RES	machine/mipssim.h	87;"	d
OP_RFE	machine/mipssim.h	65;"	d
OP_SB	machine/mipssim.h	66;"	d
OP_SH	machine/mipssim.h	67;"	d
OP_SLL	machine/mipssim.h	68;"	d
OP_SLLV	machine/mipssim.h	69;"	d
OP_SLT	machine/mipssim.h	70;"	d
OP_SLTI	machine/mipssim.h	71;"	d
OP_SLTIU	machine/mipssim.h	72;"	d
OP_SLTU	machine/mipssim.h	73;"	d
OP_SRA	machine/mipssim.h	74;"	d
OP_SRAV	machine/mipssim.h	75;"	d
OP_SRL	machine/mipssim.h	76;"	d
OP_SRLV	machine/mipssim.h	77;"	d
OP_SUB	machine/mipssim.h	78;"	d
OP_SUBU	machine/mipssim.h	79;"	d
OP_SW	machine/mipssim.h	80;"	d
OP_SWL	machine/mipssim.h	81;"	d
OP_SWR	machine/mipssim.h	82;"	d
OP_SYSCALL	machine/mipssim.h	85;"	d
OP_UNIMP	machine/mipssim.h	86;"	d
OP_XOR	machine/mipssim.h	83;"	d
OP_XORI	machine/mipssim.h	84;"	d
OpInfo	machine/mipssim.h	/^struct OpInfo {$/;"	s
OpString	machine/mipssim.h	/^struct OpString {$/;"	s
R31	machine/mipssim.h	97;"	d
RD	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
RFMT	machine/mipssim.h	110;"	d
RS	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
RT	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	e	enum:RegType
RegType	machine/mipssim.h	/^enum RegType { NONE, RS, RT, RD, EXTRA }; $/;"	g
SIGN_BIT	machine/mipssim.h	96;"	d
SPECIAL	machine/mipssim.h	105;"	d
args	machine/mipssim.h	/^    RegType args[3];$/;"	m	struct:OpString
format	machine/mipssim.h	/^    int format;		\/* Format type (IFMT or JFMT or RFMT) *\/$/;"	m	struct:OpInfo
opCode	machine/mipssim.h	/^    int opCode;		\/* Translated op code. *\/$/;"	m	struct:OpInfo
opStrings	machine/mipssim.h	/^static struct OpString opStrings[] = {$/;"	v	typeref:struct:OpString
opTable	machine/mipssim.h	/^static OpInfo opTable[] = {$/;"	v
specialTable	machine/mipssim.h	/^static int specialTable[] = {$/;"	v
string	machine/mipssim.h	/^    const char *string;	\/\/ Printed version of instruction$/;"	m	struct:OpString
CheckPktAvail	machine/network.cc	/^Network::CheckPktAvail()$/;"	f	class:Network
Network	machine/network.cc	/^Network::Network(NetworkAddress addr, double reliability,$/;"	f	class:Network
NetworkReadPoll	machine/network.cc	/^static void NetworkReadPoll(int arg)$/;"	f	file:
NetworkSendDone	machine/network.cc	/^static void NetworkSendDone(int arg)$/;"	f	file:
Receive	machine/network.cc	/^Network::Receive(char* data)$/;"	f	class:Network
Send	machine/network.cc	/^Network::Send(PacketHeader hdr, char* data)$/;"	f	class:Network
SendDone	machine/network.cc	/^Network::SendDone()$/;"	f	class:Network
~Network	machine/network.cc	/^Network::~Network()$/;"	f	class:Network
MaxPacketSize	machine/network.h	41;"	d
MaxWireSize	machine/network.h	40;"	d
NETWORK_H	machine/network.h	16;"	d
Network	machine/network.h	/^class Network {$/;"	c
NetworkAddress	machine/network.h	/^typedef int NetworkAddress;	 $/;"	t
PacketHeader	machine/network.h	/^class PacketHeader {$/;"	c
chanceToWork	machine/network.h	/^    double chanceToWork;	\/\/ Likelihood packet will be dropped$/;"	m	class:Network
from	machine/network.h	/^    NetworkAddress from;	\/\/ source machine ID$/;"	m	class:PacketHeader
handlerArg	machine/network.h	/^    int handlerArg;		\/\/ Argument to be passed to interrupt handler$/;"	m	class:Network
ident	machine/network.h	/^    NetworkAddress ident;	\/\/ This machine's network address$/;"	m	class:Network
inHdr	machine/network.h	/^    PacketHeader inHdr;		\/\/ Information about arrived packet$/;"	m	class:Network
inbox	machine/network.h	/^    char inbox[MaxPacketSize];  \/\/ Data for arrived packet$/;"	m	class:Network
length	machine/network.h	/^    unsigned length;	 	\/\/ bytes of packet data, excluding the $/;"	m	class:PacketHeader
packetAvail	machine/network.h	/^    bool packetAvail;		\/\/ Packet has arrived, can be pulled off of$/;"	m	class:Network
readHandler	machine/network.h	/^    VoidFunctionPtr readHandler;  \/\/ Interrupt handler, signalling packet has $/;"	m	class:Network
sendBusy	machine/network.h	/^    bool sendBusy;		\/\/ Packet is being sent.$/;"	m	class:Network
sock	machine/network.h	/^    int sock;			\/\/ UNIX socket number for incoming packets$/;"	m	class:Network
sockName	machine/network.h	/^    char sockName[32];		\/\/ File name corresponding to UNIX socket$/;"	m	class:Network
to	machine/network.h	/^    NetworkAddress to;		\/\/ Destination machine ID$/;"	m	class:PacketHeader
writeHandler	machine/network.h	/^    VoidFunctionPtr writeHandler; \/\/ Interrupt handler, signalling next packet $/;"	m	class:Network
Print	machine/stats.cc	/^Statistics::Print()$/;"	f	class:Statistics
Statistics	machine/stats.cc	/^Statistics::Statistics()$/;"	f	class:Statistics
ConsoleTime	machine/stats.h	66;"	d
NetworkTime	machine/stats.h	67;"	d
RotationTime	machine/stats.h	64;"	d
STATS_H	machine/stats.h	12;"	d
SeekTime	machine/stats.h	65;"	d
Statistics	machine/stats.h	/^class Statistics {$/;"	c
SystemTick	machine/stats.h	63;"	d
TimerTicks	machine/stats.h	68;"	d
UserTick	machine/stats.h	62;"	d
idleTicks	machine/stats.h	/^  long long idleTicks;       	\/\/ Time spent idle (no threads to run)$/;"	m	class:Statistics
numConsoleCharsRead	machine/stats.h	/^    int numConsoleCharsRead;	\/\/ number of characters read from the keyboard$/;"	m	class:Statistics
numConsoleCharsWritten	machine/stats.h	/^    int numConsoleCharsWritten; \/\/ number of characters written to the display$/;"	m	class:Statistics
numDiskReads	machine/stats.h	/^    int numDiskReads;		\/\/ number of disk read requests$/;"	m	class:Statistics
numDiskWrites	machine/stats.h	/^    int numDiskWrites;		\/\/ number of disk write requests$/;"	m	class:Statistics
numPacketsRecvd	machine/stats.h	/^    int numPacketsRecvd;	\/\/ number of packets received over the network$/;"	m	class:Statistics
numPacketsSent	machine/stats.h	/^    int numPacketsSent;		\/\/ number of packets sent over the network$/;"	m	class:Statistics
numPageFaults	machine/stats.h	/^    int numPageFaults;		\/\/ number of virtual memory page faults$/;"	m	class:Statistics
systemTicks	machine/stats.h	/^  long long systemTicks;	\/\/ Time spent executing system code$/;"	m	class:Statistics
totalTicks	machine/stats.h	/^  long long totalTicks;      	\/\/ Total time running Nachos$/;"	m	class:Statistics
userTicks	machine/stats.h	/^  long long userTicks;       	\/\/ Time spent executing user code$/;"	m	class:Statistics
Abort	machine/sysdep.cc	/^Abort()$/;"	f
AllocBoundedArray	machine/sysdep.cc	/^AllocBoundedArray(int size)$/;"	f
AssignNameToSocket	machine/sysdep.cc	/^AssignNameToSocket(const char *socketName, int sockID)$/;"	f
CallOnUserAbort	machine/sysdep.cc	/^CallOnUserAbort(VoidNoArgFunctionPtr func)$/;"	f
Close	machine/sysdep.cc	/^Close(int fd)$/;"	f
CloseSocket	machine/sysdep.cc	/^CloseSocket(int sockID)$/;"	f
DeAssignNameToSocket	machine/sysdep.cc	/^DeAssignNameToSocket(const char *socketName)$/;"	f
DeallocBoundedArray	machine/sysdep.cc	/^DeallocBoundedArray(char *ptr, int size)$/;"	f
Delay	machine/sysdep.cc	/^Delay(int seconds)$/;"	f
Exit	machine/sysdep.cc	/^Exit(int exitCode)$/;"	f
InitSocketName	machine/sysdep.cc	/^InitSocketName(struct sockaddr_un *uname, const char *name)$/;"	f	file:
Lseek	machine/sysdep.cc	/^Lseek(int fd, int offset, int whence)$/;"	f
OpenForReadWrite	machine/sysdep.cc	/^OpenForReadWrite(const char *name, bool crashOnError)$/;"	f
OpenForWrite	machine/sysdep.cc	/^OpenForWrite(const char *name)$/;"	f
OpenSocket	machine/sysdep.cc	/^OpenSocket()$/;"	f
PollFile	machine/sysdep.cc	/^PollFile(int fd)$/;"	f
PollSocket	machine/sysdep.cc	/^PollSocket(int sockID)$/;"	f
Random	machine/sysdep.cc	/^Random()$/;"	f
RandomInit	machine/sysdep.cc	/^RandomInit(unsigned seed)$/;"	f
Read	machine/sysdep.cc	/^Read(int fd, char *buffer, int nBytes)$/;"	f
ReadFromSocket	machine/sysdep.cc	/^ReadFromSocket(int sockID, char *buffer, int packetSize)$/;"	f
ReadPartial	machine/sysdep.cc	/^ReadPartial(int fd, char *buffer, int nBytes)$/;"	f
SendToSocket	machine/sysdep.cc	/^SendToSocket(int sockID, const char *buffer, int packetSize, const char *toName)$/;"	f
Tell	machine/sysdep.cc	/^Tell(int fd)$/;"	f
Unlink	machine/sysdep.cc	/^Unlink(const char *name)$/;"	f
WriteFile	machine/sysdep.cc	/^WriteFile(int fd, const char *buffer, int nBytes)$/;"	f
SYSDEP_H	machine/sysdep.h	12;"	d
TimeOfNextInterrupt	machine/timer.cc	/^Timer::TimeOfNextInterrupt() $/;"	f	class:Timer
Timer	machine/timer.cc	/^Timer::Timer(VoidFunctionPtr timerHandler, int callArg, bool doRandom)$/;"	f	class:Timer
TimerExpired	machine/timer.cc	/^Timer::TimerExpired() $/;"	f	class:Timer
TimerHandler	machine/timer.cc	/^static void TimerHandler(int arg)$/;"	f	file:
TIMER_H	machine/timer.h	21;"	d
Timer	machine/timer.h	/^class Timer {$/;"	c
arg	machine/timer.h	/^    int arg;			\/\/ argument to pass to interrupt handler$/;"	m	class:Timer
handler	machine/timer.h	/^    VoidFunctionPtr handler;	\/\/ timer interrupt handler $/;"	m	class:Timer
randomize	machine/timer.h	/^    bool randomize;		\/\/ set if we need to use a random timeout delay$/;"	m	class:Timer
~Timer	machine/timer.h	/^    ~Timer() {}$/;"	f	class:Timer
ReadMem	machine/translate.cc	/^Machine::ReadMem(int addr, int size, int *value)$/;"	f	class:Machine
ShortToHost	machine/translate.cc	/^ShortToHost(unsigned short shortword) {$/;"	f
ShortToMachine	machine/translate.cc	/^ShortToMachine(unsigned short shortword) { return ShortToHost(shortword); }$/;"	f
Translate	machine/translate.cc	/^Machine::Translate(int virtAddr, int* physAddr, int size, bool writing)$/;"	f	class:Machine
WordToHost	machine/translate.cc	/^WordToHost(unsigned int word) {$/;"	f
WordToMachine	machine/translate.cc	/^WordToMachine(unsigned int word) { return WordToHost(word); }$/;"	f
WriteMem	machine/translate.cc	/^Machine::WriteMem(int addr, int size, int value)$/;"	f	class:Machine
TLB_H	machine/translate.h	19;"	d
TranslationEntry	machine/translate.h	/^class TranslationEntry {$/;"	c
dirty	machine/translate.h	/^    bool dirty;         \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
physicalPage	machine/translate.h	/^    unsigned int physicalPage; 	\/\/ The page number in real memory (relative to the$/;"	m	class:TranslationEntry
readOnly	machine/translate.h	/^    bool readOnly;	\/\/ If this bit is set, the user program is not allowed$/;"	m	class:TranslationEntry
use	machine/translate.h	/^    bool use;           \/\/ This bit is set by the hardware every time the$/;"	m	class:TranslationEntry
valid	machine/translate.h	/^    bool valid;         \/\/ If this bit is set, the translation is ignored.$/;"	m	class:TranslationEntry
virtualPage	machine/translate.h	/^    unsigned int virtualPage;  	\/\/ The page number in virtual memory.$/;"	m	class:TranslationEntry
MailTest	network/nettest.cc	/^MailTest(int farAddr)$/;"	f
Get	network/post.cc	/^MailBox::Get(PacketHeader *pktHdr, MailHeader *mailHdr, char *data) $/;"	f	class:MailBox
IncomingPacket	network/post.cc	/^PostOffice::IncomingPacket()$/;"	f	class:PostOffice
Mail	network/post.cc	/^Mail::Mail(PacketHeader pktH, MailHeader mailH, char *msgData)$/;"	f	class:Mail
MailBox	network/post.cc	/^MailBox::MailBox()$/;"	f	class:MailBox
PacketSent	network/post.cc	/^PostOffice::PacketSent()$/;"	f	class:PostOffice
PostOffice	network/post.cc	/^PostOffice::PostOffice(NetworkAddress addr, double reliability, int nBoxes)$/;"	f	class:PostOffice
PostalDelivery	network/post.cc	/^PostOffice::PostalDelivery()$/;"	f	class:PostOffice
PostalHelper	network/post.cc	/^static void PostalHelper(int arg)$/;"	f	file:
PrintHeader	network/post.cc	/^PrintHeader(PacketHeader pktHdr, MailHeader mailHdr)$/;"	f	file:
Put	network/post.cc	/^MailBox::Put(PacketHeader pktHdr, MailHeader mailHdr, char *data)$/;"	f	class:MailBox
ReadAvail	network/post.cc	/^static void ReadAvail(int arg)$/;"	f	file:
Receive	network/post.cc	/^PostOffice::Receive(int box, PacketHeader *pktHdr, $/;"	f	class:PostOffice
Send	network/post.cc	/^PostOffice::Send(PacketHeader pktHdr, MailHeader mailHdr, const char* data)$/;"	f	class:PostOffice
WriteDone	network/post.cc	/^static void WriteDone(int arg)$/;"	f	file:
~MailBox	network/post.cc	/^MailBox::~MailBox()$/;"	f	class:MailBox
~PostOffice	network/post.cc	/^PostOffice::~PostOffice()$/;"	f	class:PostOffice
Mail	network/post.h	/^class Mail {$/;"	c
MailBox	network/post.h	/^class MailBox {$/;"	c
MailBoxAddress	network/post.h	/^typedef int MailBoxAddress;$/;"	t
MailHeader	network/post.h	/^class MailHeader {$/;"	c
MaxMailSize	network/post.h	53;"	d
POST_H	network/post.h	29;"	d
PostOffice	network/post.h	/^class PostOffice {$/;"	c
boxes	network/post.h	/^    MailBox *boxes;		\/\/ Table of mail boxes to hold incoming mail$/;"	m	class:PostOffice
data	network/post.h	/^     char data[MaxMailSize];	\/\/ Payload -- message data$/;"	m	class:Mail
from	network/post.h	/^    MailBoxAddress from;	\/\/ Mail box to reply to$/;"	m	class:MailHeader
length	network/post.h	/^    unsigned length;		\/\/ Bytes of message data (excluding the $/;"	m	class:MailHeader
mailHdr	network/post.h	/^     MailHeader mailHdr;	\/\/ Header appended by PostOffice$/;"	m	class:Mail
messageAvailable	network/post.h	/^    Semaphore *messageAvailable;\/\/ V'ed when message has arrived from network$/;"	m	class:PostOffice
messageSent	network/post.h	/^    Semaphore *messageSent;	\/\/ V'ed when next message can be sent to network$/;"	m	class:PostOffice
messages	network/post.h	/^    SynchList *messages;	\/\/ A mailbox is just a list of arrived messages$/;"	m	class:MailBox
netAddr	network/post.h	/^    NetworkAddress netAddr;	\/\/ Network address of this machine$/;"	m	class:PostOffice
network	network/post.h	/^    Network *network;		\/\/ Physical network connection$/;"	m	class:PostOffice
numBoxes	network/post.h	/^    int numBoxes;		\/\/ Number of mail boxes$/;"	m	class:PostOffice
pktHdr	network/post.h	/^     PacketHeader pktHdr;	\/\/ Header appended by Network$/;"	m	class:Mail
sendLock	network/post.h	/^    Lock *sendLock;		\/\/ Only one outgoing message at a time$/;"	m	class:PostOffice
to	network/post.h	/^    MailBoxAddress to;		\/\/ Destination mail box$/;"	m	class:MailHeader
main	test/halt.c	/^main ()$/;"	f
A	test/matmult.c	/^int A[Dim][Dim];$/;"	v
B	test/matmult.c	/^int B[Dim][Dim];$/;"	v
C	test/matmult.c	/^int C[Dim][Dim];$/;"	v
Dim	test/matmult.c	12;"	d	file:
main	test/matmult.c	/^main ()$/;"	f
main	test/shell.c	/^main ()$/;"	f
A	test/sort.c	/^int A[1024];			\/* size of physical memory; with code, we'll run out of space! *\/$/;"	v
main	test/sort.c	/^main ()$/;"	f
Close	test/start.S	/^Close:$/;"	l
Create	test/start.S	/^Create:$/;"	l
Exec	test/start.S	/^Exec:$/;"	l
Exit	test/start.S	/^Exit:$/;"	l
Fork	test/start.S	/^Fork:$/;"	l
Halt	test/start.S	/^Halt:$/;"	l
Join	test/start.S	/^Join:$/;"	l
Open	test/start.S	/^Open:$/;"	l
Read	test/start.S	/^Read:$/;"	l
Write	test/start.S	/^Write:$/;"	l
Yield	test/start.S	/^Yield:$/;"	l
__main	test/start.S	/^__main:$/;"	l
__start	test/start.S	/^__start:$/;"	l
FALSE	threads/bool.h	11;"	d
FALSE	threads/bool.h	13;"	d
TRUE	threads/bool.h	10;"	d
TRUE	threads/bool.h	12;"	d
_bool_h	threads/bool.h	7;"	d
copyright	threads/copyright.h	/^static const char *copyright __attribute__((unused)) =$/;"	v
Append	threads/list.cc	/^List::Append (void *item)$/;"	f	class:List
IsEmpty	threads/list.cc	/^List::IsEmpty ()$/;"	f	class:List
List	threads/list.cc	/^List::List ()$/;"	f	class:List
ListElement	threads/list.cc	/^ListElement::ListElement (void *itemPtr, long long sortKey)$/;"	f	class:ListElement
Mapcar	threads/list.cc	/^List::Mapcar (VoidFunctionPtr func)$/;"	f	class:List
Prepend	threads/list.cc	/^List::Prepend (void *item)$/;"	f	class:List
Remove	threads/list.cc	/^List::Remove ()$/;"	f	class:List
SortedInsert	threads/list.cc	/^List::SortedInsert (void *item, long long sortKey)$/;"	f	class:List
SortedRemove	threads/list.cc	/^List::SortedRemove (long long *keyPtr)$/;"	f	class:List
~List	threads/list.cc	/^List::~List ()$/;"	f	class:List
LIST_H	threads/list.h	14;"	d
List	threads/list.h	/^class List$/;"	c
ListElement	threads/list.h	/^class ListElement$/;"	c
first	threads/list.h	/^      ListElement * first;	\/\/ Head of the list, NULL if list is empty$/;"	m	class:List
item	threads/list.h	/^    void *item;			\/\/ pointer to item on the list$/;"	m	class:ListElement
key	threads/list.h	/^    long long key;			\/\/ priority, for a sorted list$/;"	m	class:ListElement
last	threads/list.h	/^    ListElement *last;		\/\/ Last element of list$/;"	m	class:List
next	threads/list.h	/^    ListElement *next;		\/\/ next element on list, $/;"	m	class:ListElement
MAIN	threads/main.cc	49;"	d	file:
MAIN	threads/main.cc	51;"	d	file:
main	threads/main.cc	/^main (int argc, char **argv)$/;"	f
FindNextToRun	threads/scheduler.cc	/^Scheduler::FindNextToRun ()$/;"	f	class:Scheduler
Print	threads/scheduler.cc	/^Scheduler::Print ()$/;"	f	class:Scheduler
ReadyToRun	threads/scheduler.cc	/^Scheduler::ReadyToRun (Thread * thread)$/;"	f	class:Scheduler
Run	threads/scheduler.cc	/^Scheduler::Run (Thread * nextThread)$/;"	f	class:Scheduler
Scheduler	threads/scheduler.cc	/^Scheduler::Scheduler ()$/;"	f	class:Scheduler
~Scheduler	threads/scheduler.cc	/^Scheduler::~Scheduler ()$/;"	f	class:Scheduler
SCHEDULER_H	threads/scheduler.h	10;"	d
Scheduler	threads/scheduler.h	/^class Scheduler$/;"	c
readyList	threads/scheduler.h	/^      List * readyList;		\/\/ queue of threads that are ready to run,$/;"	m	class:Scheduler
MINFRAME	threads/switch.S	/^#define MINFRAME 256$/;"	d
STACK_ALIGN	threads/switch.S	/^#define STACK_ALIGN	32L$/;"	d
SWITCH	threads/switch.S	/^SWITCH$/;"	l
SWITCH	threads/switch.S	/^SWITCH:	$/;"	l
SWITCH	threads/switch.S	/^SWITCH:$/;"	l
ThreadRoot	threads/switch.S	/^ThreadRoot$/;"	l
ThreadRoot	threads/switch.S	/^ThreadRoot:	$/;"	l
ThreadRoot	threads/switch.S	/^ThreadRoot:$/;"	l
_SWITCH	threads/switch.S	/^_SWITCH:$/;"	l
_ThreadRoot	threads/switch.S	/^_ThreadRoot:$/;"	l
a0	threads/switch.S	/^#define a0      $4      \/* argument registers *\/$/;"	d
a1	threads/switch.S	/^#define a1      $5$/;"	d
fp	threads/switch.S	/^#define fp      $30     \/* frame pointer *\/$/;"	d
ra	threads/switch.S	/^#define ra      $31     \/* return address *\/$/;"	d
s0	threads/switch.S	/^#define s0      $16     \/* callee saved *\/$/;"	d
s1	threads/switch.S	/^#define s1      $17$/;"	d
s2	threads/switch.S	/^#define s2      $18$/;"	d
s3	threads/switch.S	/^#define s3      $19$/;"	d
s4	threads/switch.S	/^#define s4      $20$/;"	d
s5	threads/switch.S	/^#define s5      $21$/;"	d
s6	threads/switch.S	/^#define s6      $22$/;"	d
s7	threads/switch.S	/^#define s7      $23$/;"	d
sp	threads/switch.S	/^#define sp      $29     \/* stack pointer *\/$/;"	d
z	threads/switch.S	/^#define z       $0      \/* zero register *\/$/;"	d
FP	threads/switch.h	37;"	d
FP	threads/switch.h	77;"	d
FPState	threads/switch.h	143;"	d
FPState	threads/switch.h	56;"	d
I0	threads/switch.h	67;"	d
I1	threads/switch.h	68;"	d
I2	threads/switch.h	69;"	d
I3	threads/switch.h	70;"	d
I4	threads/switch.h	71;"	d
I5	threads/switch.h	72;"	d
I6	threads/switch.h	73;"	d
I7	threads/switch.h	74;"	d
InitialArg	threads/switch.h	117;"	d
InitialArg	threads/switch.h	150;"	d
InitialArg	threads/switch.h	51;"	d
InitialArg	threads/switch.h	82;"	d
InitialArgState	threads/switch.h	123;"	d
InitialArgState	threads/switch.h	145;"	d
InitialArgState	threads/switch.h	58;"	d
InitialArgState	threads/switch.h	88;"	d
InitialPC	threads/switch.h	116;"	d
InitialPC	threads/switch.h	149;"	d
InitialPC	threads/switch.h	50;"	d
InitialPC	threads/switch.h	81;"	d
InitialPCState	threads/switch.h	122;"	d
InitialPCState	threads/switch.h	144;"	d
InitialPCState	threads/switch.h	57;"	d
InitialPCState	threads/switch.h	87;"	d
PC	threads/switch.h	113;"	d
PC	threads/switch.h	38;"	d
PC	threads/switch.h	78;"	d
PCState	threads/switch.h	121;"	d
PCState	threads/switch.h	142;"	d
PCState	threads/switch.h	55;"	d
PCState	threads/switch.h	86;"	d
S0	threads/switch.h	29;"	d
S0	threads/switch.h	97;"	d
S1	threads/switch.h	30;"	d
S1	threads/switch.h	98;"	d
S10	threads/switch.h	107;"	d
S11	threads/switch.h	108;"	d
S12	threads/switch.h	109;"	d
S13	threads/switch.h	110;"	d
S14	threads/switch.h	111;"	d
S15	threads/switch.h	112;"	d
S2	threads/switch.h	31;"	d
S2	threads/switch.h	99;"	d
S3	threads/switch.h	100;"	d
S3	threads/switch.h	32;"	d
S4	threads/switch.h	101;"	d
S4	threads/switch.h	33;"	d
S5	threads/switch.h	102;"	d
S5	threads/switch.h	34;"	d
S6	threads/switch.h	103;"	d
S6	threads/switch.h	35;"	d
S7	threads/switch.h	104;"	d
S7	threads/switch.h	36;"	d
S8	threads/switch.h	105;"	d
S9	threads/switch.h	106;"	d
SP	threads/switch.h	28;"	d
SP	threads/switch.h	96;"	d
SWITCH_H	threads/switch.h	18;"	d
StartupPC	threads/switch.h	119;"	d
StartupPC	threads/switch.h	152;"	d
StartupPC	threads/switch.h	53;"	d
StartupPC	threads/switch.h	84;"	d
StartupPCState	threads/switch.h	125;"	d
StartupPCState	threads/switch.h	147;"	d
StartupPCState	threads/switch.h	60;"	d
StartupPCState	threads/switch.h	90;"	d
WhenDonePC	threads/switch.h	118;"	d
WhenDonePC	threads/switch.h	151;"	d
WhenDonePC	threads/switch.h	52;"	d
WhenDonePC	threads/switch.h	83;"	d
WhenDonePCState	threads/switch.h	124;"	d
WhenDonePCState	threads/switch.h	146;"	d
WhenDonePCState	threads/switch.h	59;"	d
WhenDonePCState	threads/switch.h	89;"	d
_EAX	threads/switch.h	132;"	d
_EBP	threads/switch.h	136;"	d
_EBX	threads/switch.h	133;"	d
_ECX	threads/switch.h	134;"	d
_EDI	threads/switch.h	138;"	d
_EDX	threads/switch.h	135;"	d
_ESI	threads/switch.h	137;"	d
_ESP	threads/switch.h	131;"	d
_PC	threads/switch.h	139;"	d
Acquire	threads/synch.cc	/^Lock::Acquire ()$/;"	f	class:Lock
Broadcast	threads/synch.cc	/^Condition::Broadcast (Lock * conditionLock)$/;"	f	class:Condition
Condition	threads/synch.cc	/^Condition::Condition (const char *debugName)$/;"	f	class:Condition
Lock	threads/synch.cc	/^Lock::Lock (const char *debugName)$/;"	f	class:Lock
P	threads/synch.cc	/^Semaphore::P ()$/;"	f	class:Semaphore
Release	threads/synch.cc	/^Lock::Release ()$/;"	f	class:Lock
Semaphore	threads/synch.cc	/^Semaphore::Semaphore (const char *debugName, int initialValue)$/;"	f	class:Semaphore
Signal	threads/synch.cc	/^Condition::Signal (Lock * conditionLock)$/;"	f	class:Condition
V	threads/synch.cc	/^Semaphore::V ()$/;"	f	class:Semaphore
Wait	threads/synch.cc	/^Condition::Wait (Lock * conditionLock)$/;"	f	class:Condition
~Condition	threads/synch.cc	/^Condition::~Condition ()$/;"	f	class:Condition
~Lock	threads/synch.cc	/^Lock::~Lock ()$/;"	f	class:Lock
~Semaphore	threads/synch.cc	/^Semaphore::~Semaphore ()$/;"	f	class:Semaphore
Condition	threads/synch.h	/^class Condition$/;"	c
Lock	threads/synch.h	/^class Lock$/;"	c
SYNCH_H	threads/synch.h	18;"	d
Semaphore	threads/synch.h	/^class Semaphore$/;"	c
getName	threads/synch.h	/^    const char *getName ()$/;"	f	class:Condition
getName	threads/synch.h	/^    const char *getName ()$/;"	f	class:Lock
getName	threads/synch.h	/^    const char *getName ()$/;"	f	class:Semaphore
name	threads/synch.h	/^    const char *name;		\/\/ for debugging$/;"	m	class:Lock
name	threads/synch.h	/^    const char *name;		\/\/ useful for debugging$/;"	m	class:Semaphore
name	threads/synch.h	/^    const char *name;$/;"	m	class:Condition
queue	threads/synch.h	/^    List *queue;		\/\/ threads waiting in P() for the value to be > 0$/;"	m	class:Semaphore
value	threads/synch.h	/^    int value;			\/\/ semaphore value, always >= 0$/;"	m	class:Semaphore
Append	threads/synchlist.cc	/^SynchList::Append (void *item)$/;"	f	class:SynchList
Mapcar	threads/synchlist.cc	/^SynchList::Mapcar (VoidFunctionPtr func)$/;"	f	class:SynchList
Remove	threads/synchlist.cc	/^SynchList::Remove ()$/;"	f	class:SynchList
SynchList	threads/synchlist.cc	/^SynchList::SynchList ()$/;"	f	class:SynchList
~SynchList	threads/synchlist.cc	/^SynchList::~SynchList ()$/;"	f	class:SynchList
SYNCHLIST_H	threads/synchlist.h	12;"	d
SynchList	threads/synchlist.h	/^class SynchList$/;"	c
list	threads/synchlist.h	/^      List * list;		\/\/ the unsynchronized list$/;"	m	class:SynchList
listEmpty	threads/synchlist.h	/^    Condition *listEmpty;	\/\/ wait in Remove if the list is empty$/;"	m	class:SynchList
lock	threads/synchlist.h	/^    Lock *lock;			\/\/ enforce mutual exclusive access to the list$/;"	m	class:SynchList
Cleanup	threads/system.cc	/^Cleanup ()$/;"	f
Initialize	threads/system.cc	/^Initialize (int argc, char **argv)$/;"	f
TimerInterruptHandler	threads/system.cc	/^TimerInterruptHandler (int dummy)$/;"	f	file:
currentThread	threads/system.cc	/^Thread *currentThread;		\/\/ the thread we are running now$/;"	v
fileSystem	threads/system.cc	/^FileSystem *fileSystem;$/;"	v
interrupt	threads/system.cc	/^Interrupt *interrupt;		\/\/ interrupt status$/;"	v
machine	threads/system.cc	/^Machine *machine;		\/\/ user program memory and registers$/;"	v
postOffice	threads/system.cc	/^PostOffice *postOffice;$/;"	v
scheduler	threads/system.cc	/^Scheduler *scheduler;		\/\/ the ready list$/;"	v
stats	threads/system.cc	/^Statistics *stats;		\/\/ performance metrics$/;"	v
synchDisk	threads/system.cc	/^SynchDisk *synchDisk;$/;"	v
threadToBeDestroyed	threads/system.cc	/^Thread *threadToBeDestroyed;	\/\/ the thread that just finished$/;"	v
timer	threads/system.cc	/^Timer *timer;			\/\/ the hardware timer device,$/;"	v
SYSTEM_H	threads/system.h	9;"	d
CheckOverflow	threads/thread.cc	/^Thread::CheckOverflow ()$/;"	f	class:Thread
Finish	threads/thread.cc	/^Thread::Finish ()$/;"	f	class:Thread
Fork	threads/thread.cc	/^Thread::Fork (VoidFunctionPtr func, int arg)$/;"	f	class:Thread
InterruptEnable	threads/thread.cc	/^InterruptEnable ()$/;"	f	file:
RestoreUserState	threads/thread.cc	/^Thread::RestoreUserState ()$/;"	f	class:Thread
STACK_FENCEPOST	threads/thread.cc	23;"	d	file:
SaveUserState	threads/thread.cc	/^Thread::SaveUserState ()$/;"	f	class:Thread
SetupThreadState	threads/thread.cc	/^SetupThreadState ()$/;"	f
Sleep	threads/thread.cc	/^Thread::Sleep ()$/;"	f	class:Thread
StackAllocate	threads/thread.cc	/^Thread::StackAllocate (VoidFunctionPtr func, int arg)$/;"	f	class:Thread
Thread	threads/thread.cc	/^Thread::Thread (const char *threadName)$/;"	f	class:Thread
ThreadFinish	threads/thread.cc	/^ThreadFinish ()$/;"	f	file:
ThreadPrint	threads/thread.cc	/^ThreadPrint (int arg)$/;"	f
Yield	threads/thread.cc	/^Thread::Yield ()$/;"	f	class:Thread
~Thread	threads/thread.cc	/^Thread::~Thread ()$/;"	f	class:Thread
BLOCKED	threads/thread.h	/^{ JUST_CREATED, RUNNING, READY, BLOCKED };$/;"	e	enum:ThreadStatus
JUST_CREATED	threads/thread.h	/^{ JUST_CREATED, RUNNING, READY, BLOCKED };$/;"	e	enum:ThreadStatus
MachineStateSize	threads/thread.h	51;"	d
Print	threads/thread.h	/^    void Print ()$/;"	f	class:Thread
READY	threads/thread.h	/^{ JUST_CREATED, RUNNING, READY, BLOCKED };$/;"	e	enum:ThreadStatus
RUNNING	threads/thread.h	/^{ JUST_CREATED, RUNNING, READY, BLOCKED };$/;"	e	enum:ThreadStatus
StackSize	threads/thread.h	56;"	d
THREAD_H	threads/thread.h	38;"	d
Thread	threads/thread.h	/^class Thread$/;"	c
ThreadStatus	threads/thread.h	/^enum ThreadStatus$/;"	g
getName	threads/thread.h	/^    const char *getName ()$/;"	f	class:Thread
machineState	threads/thread.h	/^    int machineState[MachineStateSize];	\/\/ all registers except for stackTop$/;"	m	class:Thread
name	threads/thread.h	/^    const char *name;$/;"	m	class:Thread
setStatus	threads/thread.h	/^    void setStatus (ThreadStatus st)$/;"	f	class:Thread
space	threads/thread.h	/^    AddrSpace *space;		\/\/ User code this thread is running.$/;"	m	class:Thread
stack	threads/thread.h	/^    int *stack;			\/\/ Bottom of the stack $/;"	m	class:Thread
stackTop	threads/thread.h	/^    int *stackTop;		\/\/ the current stack pointer$/;"	m	class:Thread
status	threads/thread.h	/^    ThreadStatus status;	\/\/ ready, running or blocked$/;"	m	class:Thread
userRegisters	threads/thread.h	/^    int userRegisters[NumTotalRegs];	\/\/ user-level CPU register state$/;"	m	class:Thread
SimpleThread	threads/threadtest.cc	/^SimpleThread (int which)$/;"	f
ThreadTest	threads/threadtest.cc	/^ThreadTest ()$/;"	f
DEBUG	threads/utility.cc	/^DEBUG (char flag, const char *format, ...)$/;"	f
DebugInit	threads/utility.cc	/^DebugInit (const char *flagList)$/;"	f
DebugIsEnabled	threads/utility.cc	/^DebugIsEnabled (char flag)$/;"	f
enableFlags	threads/utility.cc	/^static const char *enableFlags = NULL;	\/\/ controls which DEBUG messages are printed $/;"	v	file:
ASSERT	threads/utility.h	73;"	d
UTILITY_H	threads/utility.h	24;"	d
VoidFunctionPtr	threads/utility.h	/^typedef void (*VoidFunctionPtr) (int arg);$/;"	t
VoidNoArgFunctionPtr	threads/utility.h	/^typedef void (*VoidNoArgFunctionPtr) ();$/;"	t
divRoundDown	threads/utility.h	36;"	d
divRoundUp	threads/utility.h	37;"	d
AddrSpace	userprog/addrspace.cc	/^AddrSpace::AddrSpace (OpenFile * executable)$/;"	f	class:AddrSpace
InitRegisters	userprog/addrspace.cc	/^AddrSpace::InitRegisters ()$/;"	f	class:AddrSpace
RestoreState	userprog/addrspace.cc	/^AddrSpace::RestoreState ()$/;"	f	class:AddrSpace
SaveState	userprog/addrspace.cc	/^AddrSpace::SaveState ()$/;"	f	class:AddrSpace
SwapHeader	userprog/addrspace.cc	/^SwapHeader (NoffHeader * noffH)$/;"	f	file:
~AddrSpace	userprog/addrspace.cc	/^AddrSpace::~AddrSpace ()$/;"	f	class:AddrSpace
ADDRSPACE_H	userprog/addrspace.h	14;"	d
AddrSpace	userprog/addrspace.h	/^class AddrSpace$/;"	c
UserStackSize	userprog/addrspace.h	19;"	d
numPages	userprog/addrspace.h	/^    unsigned int numPages;	\/\/ Number of pages in the virtual $/;"	m	class:AddrSpace
pageTable	userprog/addrspace.h	/^      TranslationEntry * pageTable;	\/\/ Assume linear page table translation$/;"	m	class:AddrSpace
BitMap	userprog/bitmap.cc	/^BitMap::BitMap (int nitems)$/;"	f	class:BitMap
Clear	userprog/bitmap.cc	/^BitMap::Clear (int which)$/;"	f	class:BitMap
FetchFrom	userprog/bitmap.cc	/^BitMap::FetchFrom (OpenFile * file)$/;"	f	class:BitMap
Find	userprog/bitmap.cc	/^BitMap::Find ()$/;"	f	class:BitMap
Mark	userprog/bitmap.cc	/^BitMap::Mark (int which)$/;"	f	class:BitMap
NumClear	userprog/bitmap.cc	/^BitMap::NumClear ()$/;"	f	class:BitMap
Print	userprog/bitmap.cc	/^BitMap::Print ()$/;"	f	class:BitMap
Test	userprog/bitmap.cc	/^BitMap::Test (int which)$/;"	f	class:BitMap
WriteBack	userprog/bitmap.cc	/^BitMap::WriteBack (OpenFile * file)$/;"	f	class:BitMap
~BitMap	userprog/bitmap.cc	/^BitMap::~BitMap ()$/;"	f	class:BitMap
BITMAP_H	userprog/bitmap.h	16;"	d
BitMap	userprog/bitmap.h	/^class BitMap$/;"	c
BitsInByte	userprog/bitmap.h	23;"	d
BitsInWord	userprog/bitmap.h	24;"	d
map	userprog/bitmap.h	/^    unsigned int *map;		\/\/ bit storage$/;"	m	class:BitMap
numBits	userprog/bitmap.h	/^    int numBits;		\/\/ number of bits in the bitmap$/;"	m	class:BitMap
numWords	userprog/bitmap.h	/^    int numWords;		\/\/ number of words of bitmap storage$/;"	m	class:BitMap
ExceptionHandler	userprog/exception.cc	/^ExceptionHandler (ExceptionType which)$/;"	f
UpdatePC	userprog/exception.cc	/^UpdatePC ()$/;"	f	file:
ConsoleTest	userprog/progtest.cc	/^ConsoleTest (char *in, char *out)$/;"	f
ReadAvail	userprog/progtest.cc	/^ReadAvail (int arg)$/;"	f	file:
StartProcess	userprog/progtest.cc	/^StartProcess (char *filename)$/;"	f
WriteDone	userprog/progtest.cc	/^WriteDone (int arg)$/;"	f	file:
console	userprog/progtest.cc	/^static Console *console;$/;"	v	file:
readAvail	userprog/progtest.cc	/^static Semaphore *readAvail;$/;"	v	file:
writeDone	userprog/progtest.cc	/^static Semaphore *writeDone;$/;"	v	file:
ConsoleInput	userprog/syscall.h	90;"	d
ConsoleOutput	userprog/syscall.h	91;"	d
OpenFileId	userprog/syscall.h	/^typedef int OpenFileId;$/;"	t
SC_Close	userprog/syscall.h	29;"	d
SC_Create	userprog/syscall.h	25;"	d
SC_Exec	userprog/syscall.h	23;"	d
SC_Exit	userprog/syscall.h	22;"	d
SC_Fork	userprog/syscall.h	30;"	d
SC_Halt	userprog/syscall.h	21;"	d
SC_Join	userprog/syscall.h	24;"	d
SC_Open	userprog/syscall.h	26;"	d
SC_Read	userprog/syscall.h	27;"	d
SC_Write	userprog/syscall.h	28;"	d
SC_Yield	userprog/syscall.h	31;"	d
SYSCALLS_H	userprog/syscall.h	14;"	d
SpaceId	userprog/syscall.h	/^typedef int SpaceId;$/;"	t
